{{ 'component-slideshow.css' | asset_url | stylesheet_tag }}
<style>

  .slide-text{
      background-color: var(--background_product_card);
      color:var(--color_text);
  }
  .slideshow_btn{
    background-color:rgb(var(--color-button-text));
    color:rgb(var(--color-secondary-button-text));
  }
  .slideshow_desktop {
    display: block;
  }
  .slideshow_mobile {
    display: none;
  }
  
  @media screen and (max-width: 900px) {
    .slideshow_desktop {
      display: none;
    }
    .slideshow_mobile {
      display: block;
    }
  }  
</style>
<div class="slideshow-section color-{{ section.settings.color_scheme }} gradient section-{{ section.id }}-padding">
  <div class="interactive-slideshow">
    {% for block in section.blocks %}
      <div class="slide {% if forloop.first %}active{% endif %}" data-index="{{ forloop.index0 }}">
       
          <div class="backfold">
             {% if block.settings.image != blank %}
                 <!-- Desktop Image -->
                   {{
                      block.settings.image
                      | image_url: width: 1800
                      | image_tag:
                          class: 'slideshow_media slideshow_desktop',
                        alt: block.settings.title | escape
                      }}
                    <!-- Mobile Image -->
                      {{
                      block.settings.mobile_image | default: block.settings.image
                      | image_url: width: 800
                      | image_tag:
                          class: 'slideshow_media slideshow_mobile',
                        alt: block.settings.title | escape
                      }}
                {% else %}
                   {{ 'collection-1' | placeholder_svg_tag: 'placeholder-svg placeholder' }}
              {% endif %}
          </div>
     
       {% if block.settings.feature != blank %}
  <div class="headarrow">
    <h3 class="headingtext">{{ block.settings.feature }}</h3>
    <span id="info__banner__expand__button" class="headarrow_svg-wrapper">
      {{- 'icon-arrow.svg' | inline_asset_content -}}
    </span>
  </div>
{% endif %}
        <div class="slide-text" >
         <div class="description {% if block.settings.content != blank or block.settings.title != blank or block.settings.feature != blank %}has-content{% endif %}">
  <p class="feature">{{ block.settings.feature }}</p>
  <h2>{{ block.settings.title }}</h2>
  <p class="feature1">{{ block.settings.content }}</p>
</div>
<div class="des-button {% if block.settings.show_button %}has-button{% endif %}">
  {% if block.settings.show_button %}
    <a href="{{ block.settings.button_link }}" class="slideshow_btn">{{ block.settings.button_text }}</a>
  {% endif %}
</div>
        </div>
      </div>
    {% endfor %}
  </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
  initializeSlideshows();
});

function initializeSlideshows() {
  const slideshowSections = document.querySelectorAll('.slideshow-section');
  
  slideshowSections.forEach(section => {
    const slideshow = section.querySelector('.interactive-slideshow');
    const slides = section.querySelectorAll('.slide');
    
    if (!slideshow || !slides.length) return;
    
    new InteractiveSlideshow(slideshow, slides);
  });
}

class InteractiveSlideshow {
  constructor(slideshow, slides) {
    this.slideshow = slideshow;
    this.slides = Array.from(slides); // Convert NodeList to Array for easier manipulation
    this.activeSlide = null;
    this.isMobile = window.innerWidth <= 900;
    this.startX = 0;
    this.scrollLeft = 0;
    this.isDown = false;
    this.clickHandlers = new Map();
    this.activeDropdown = null;
    
   
    this.handleResize = this.handleResize.bind(this);
    this.handleClickOutside = this.handleClickOutside.bind(this);
    this.handleMouseDown = this.handleMouseDown.bind(this);
    this.handleMouseLeave = this.handleMouseLeave.bind(this);
    this.handleMouseUp = this.handleMouseUp.bind(this);
    this.handleMouseMove = this.handleMouseMove.bind(this);
    
    this.init();
    
  
    window.addEventListener('resize', this.debounce(this.handleResize, 250));
  }
  
  init() {
    this.cleanupListeners(); 
    this.adjustJustifyContent();
    this.setupViewMode();
  }
  
  setupViewMode() {
    if (this.isMobile) {
      this.setupMobileView();
    } else {
      this.setupDesktopView();
    }
  }
  
  setupMobileView() {
    this.removeActiveState();
    this.addMobileListeners();
    this.slideshow.style.cursor = 'grab';
  }
  
  setupDesktopView() {
    this.addDesktopListeners();
    this.setActiveSlide(this.slides[0]);
    this.slideshow.style.cursor = 'default';
  }
  
  adjustJustifyContent() {
    if (!this.isMobile) {
      this.slideshow.style.justifyContent = 
        this.slideshow.scrollWidth <= this.slideshow.clientWidth ? 'center' : 'flex-start';
    } else {
      this.slideshow.style.justifyContent = '';
    }
  }
  
  setActiveSlide(slide) {
    if (!this.isMobile && slide !== this.activeSlide) {
      this.slides.forEach(s => s.classList.remove('active'));
      slide.classList.add('active');
      this.activeSlide = slide;
    }
  }
  
  toggleSlideText(slideText, arrow, event) {
    if (event) {
      event.stopPropagation();
      event.preventDefault();
    }
    
    if (slideText.classList.contains('expanded')) {
      this.closeDropdown(slideText, arrow);
    } else {
      this.openDropdown(slideText, arrow);
    }
  }
  
  closeDropdown(slideText, arrow) {
    slideText.classList.remove('expanded');
    arrow.classList.remove('expanded');
    this.activeDropdown = null;
    document.removeEventListener('click', this.handleClickOutside);
  }
  
  openDropdown(slideText, arrow) {
   
    if (this.activeDropdown) {
      const activeArrow = this.activeDropdown.parentElement.querySelector('.headarrow_svg-wrapper');
      this.closeDropdown(this.activeDropdown, activeArrow);
    }
    
    slideText.classList.add('expanded');
    arrow.classList.add('expanded');
    this.activeDropdown = slideText;
    
   
    setTimeout(() => {
      document.addEventListener('click', this.handleClickOutside);
    }, 0);
  }
  
  handleClickOutside(event) {
    if (this.activeDropdown && !this.activeDropdown.contains(event.target)) {
      const activeArrow = this.activeDropdown.parentElement.querySelector('.headarrow_svg-wrapper');
      if (!activeArrow.contains(event.target)) {
        this.closeDropdown(this.activeDropdown, activeArrow);
      }
    }
  }
  
  handleMouseDown(e) {
    this.isDown = true;
    this.slideshow.style.cursor = 'grabbing';
    this.startX = e.pageX - this.slideshow.offsetLeft;
    this.scrollLeft = this.slideshow.scrollLeft;
  }
  
  handleMouseLeave() {
    this.isDown = false;
    this.slideshow.style.cursor = 'grab';
  }
  
  handleMouseUp() {
    this.isDown = false;
    this.slideshow.style.cursor = 'grab';
  }
  
  handleMouseMove(e) {
    if (!this.isDown) return;
    e.preventDefault();
    const x = e.pageX - this.slideshow.offsetLeft;
    const walk = (x - this.startX) * 2;
    this.slideshow.scrollLeft = this.scrollLeft - walk;
  }
  
  addMobileListeners() {
   
    this.slideshow.addEventListener('mousedown', this.handleMouseDown);
    this.slideshow.addEventListener('mouseleave', this.handleMouseLeave);
    this.slideshow.addEventListener('mouseup', this.handleMouseUp);
    this.slideshow.addEventListener('mousemove', this.handleMouseMove);
   
    this.slides.forEach(slide => {
      const arrow = slide.querySelector('.headarrow_svg-wrapper');
      const slideText = slide.querySelector('.slide-text');
      
      if (arrow && slideText) {
        const clickHandler = (e) => this.toggleSlideText(slideText, arrow, e);
        this.clickHandlers.set(arrow, clickHandler);
        
        arrow.addEventListener('click', clickHandler);
        arrow.addEventListener('touchend', clickHandler);
      }
    });
  }
  
  addDesktopListeners() {
    this.slides.forEach(slide => {
      const mouseEnterHandler = () => this.setActiveSlide(slide);
      this.clickHandlers.set(slide, mouseEnterHandler);
      slide.addEventListener('mouseenter', mouseEnterHandler);
    });
  }
  
  cleanupListeners() {

    this.slideshow.removeEventListener('mousedown', this.handleMouseDown);
    this.slideshow.removeEventListener('mouseleave', this.handleMouseLeave);
    this.slideshow.removeEventListener('mouseup', this.handleMouseUp);
    this.slideshow.removeEventListener('mousemove', this.handleMouseMove);
  
    this.clickHandlers.forEach((handler, element) => {
      element.removeEventListener('click', handler);
      element.removeEventListener('touchend', handler);
      element.removeEventListener('mouseenter', handler);
    });
    this.clickHandlers.clear();
    
    if (this.activeDropdown) {
      const activeArrow = this.activeDropdown.parentElement.querySelector('.headarrow_svg-wrapper');
      this.closeDropdown(this.activeDropdown, activeArrow);
    }
    
    document.removeEventListener('click', this.handleClickOutside);
  }
  
  removeActiveState() {
    this.slides.forEach(slide => slide.classList.remove('active'));
    this.activeSlide = null;
  }
  
  handleResize() {
    const newIsMobile = window.innerWidth <= 900;
    if (newIsMobile !== this.isMobile) {
      this.isMobile = newIsMobile;
      this.init(); // Reinitialize everything when view mode changes
    }
    this.adjustJustifyContent();
  }
  
  debounce(func, wait) {
    let timeout;
    return function executedFunction(...args) {
      const later = () => {
        clearTimeout(timeout);
        func.apply(this, args);
      };
      clearTimeout(timeout);
      timeout = setTimeout(later, wait);
    };
  }
}

if (typeof Shopify !== 'undefined' && Shopify.designMode) {
  document.addEventListener('shopify:section:load', function(event) {
    if (event.target.classList.contains('slideshow-section')) {
      initializeSlideshows();
    }
  });
}
</script> 




{% schema %}
{
"name": "Interactive Slideshow",
"disabled_on": {
    "groups": ["header", "footer"]
  },
"settings": [
  {
    "type": "color_scheme",
    "id": "color_scheme",
    "label": "t:sections.all.colors.label",
    "default": "scheme-1"
  },
],
"blocks": [
  {
    "type": "slide",
    "name": "Slide",
    "settings": [
      {
      "type": "header",
      "content": "Image Settings"
    },
    {
      "type": "image_picker",
      "id": "image",
      "label": "Desktop Image"
    },
    {
      "type": "image_picker",
      "id": "mobile_image",
      "label": "Mobile Image (Optional)",
      "info": "If not set, desktop image will be used"
    },
       {
        "type": "text",
        "id": "feature",
        "label": "Feature",
        "default": "NEW ARRIVAL"
      },
      {
        "type": "text",
        "id": "title",
        "label": "Title",
        "default": "Thanksgiving Big Billion Sale!"
      },
        {
        "type": "richtext",
        "id": "content",
        "label": "Content",
        "default": "<p>Enhance patient care with our premium medical product,featuring advanced technology for precision and reliability. Ideal for seamless integration into any practical</p>"
      },
       {
        "type": "checkbox",
        "id": "show_button",
        "label": "Show Button",
        "default": true
      },
      
      {
        "type": "text",
        "id": "button_text",
        "label": "Button Text",
        "default": "Shop Now"
      },
      {
        "type": "url",
        "id": "button_link",
        "label": "Button Link"
      },
    ]
  }
],
"presets": [
  {
    "name": "Interactive Slideshow",
    "blocks": [
      {
        "type": "slide"
      },
      {
        "type": "slide"
      },
      {
        "type": "slide"
      },
        {
        "type": "slide"
      },
        {
        "type": "slide"
      },
        {
        "type": "slide"
      },
    ]
  }
]
}
{% endschema %}
