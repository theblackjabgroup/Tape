{{ 'collapsible-content.css' | asset_url | stylesheet_tag }}

<style>
  .faq-item {
    background-color: rgb(var(--color-button));
  }
  
  .faq-main {
    padding-top: {{ section.settings.padding_top }}px;
    padding-bottom: {{ section.settings.padding_bottom }}px;
    background-color: rgb(var(--color-background));
  }
  
  .collapse_dot,
  .striaght-line,
  .faq-item::before,
  .faq-item::after {
    background-color: rgb(var(--color-background));
  }
</style>

<div class="faq-section gradient">
  <div class="faq-main color-{{ section.settings.color_scheme }}">
    <div class="faq-header">
      <h2 class="faq-title">{{ section.settings.caption | default: 'Help & Support' }}</h2>
      <p class="support-text">{{ section.settings.description | default: "We're here to assist you with questions about products, sizing, or orders. Our customer support team is available via phone, email, or live chat." }}</p>
    </div>
    
    <div class="faq-container" data-faq-container>
      {% for block in section.blocks %}
      <div class="faq-item" 
     data-faq-item="{{ forloop.index }}"
     role="button" 
     tabindex="0" 
     aria-expanded="false" 
     aria-controls="faq-content-{{ forloop.index }}">
          <span class="faq-number">{{ block.settings.serialno }}</span>
          
          {% if section.settings.layout_style == 'layout1' %}
            <div class="dots-line" data-dots-line>
              <span class="collapse_dot"></span>
      <span class="collapse_dot"></span>
      <span class="collapse_dot"></span>
       <span class="collapse_dot"></span>
      <span class="collapse_dot"></span> 
            </div>
          {% else %}
            <div class="striaght-line"><h6></h6></div>
          {% endif %}
          
          <div class="faq-content">
            <div class="faq-question">
              <div class="question-text">{{ block.settings.questiontext }}</div>
              <div class="faq-answer">{{ block.settings.solutionans }}</div>
            </div>
            <div>
              <svg class="icon-arrow" width="24" height="24" viewBox="0 0 24 24">
                <path d="M7 10l5 5 5-5" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
              </svg>
            </div>
          </div>
        </div>
      {% endfor %}
    </div>
  </div>
</div>
<style>
[data-faq-item] {
  outline: none; 
  transition: box-shadow 0.2s ease-in-out;
}


[data-faq-item]:focus-visible {
  outline: 2px solid rgb(var(--color-foreground));
  outline-offset: 2px;
  box-shadow: 0 0 0 3px rgba(var(--color-foreground), 0.3); 
}

[data-faq-item] .icon-arrow {
  transition: transform 0.3s ease;
}

[data-faq-item] .icon-arrow.rotated {
  transform: rotate(180deg);
}

.faq-answer {
  max-height: 0;
  overflow: hidden;
  opacity: 0;
  transition: max-height 0.3s ease, opacity 0.3s ease;
}

.faq-answer.visible {
  max-height: 500px;
  opacity: 1;
}
</style>
           <script>
document.addEventListener('DOMContentLoaded', function() {
  // Create a unique identifier for each FAQ section
  const faqSections = document.querySelectorAll('.faq-section');
  faqSections.forEach((section, sectionIndex) => {
    section.setAttribute('data-faq-section', `faq-${sectionIndex}`);
    
    const createDots = (dotsLine, isExpanding='false' ) => {
      if (!dotsLine) return;
      const containerHeight = dotsLine.offsetHeight;
      const dotHeight = 9;
      const dotMargin = 8;
      const dotSpacing = dotHeight + dotMargin;
      const numberOfDots = Math.floor(containerHeight / dotSpacing);
      const currentDots = dotsLine.querySelectorAll('.collapse_dot').length;
      
      if (isExpanding && currentDots < numberOfDots) {
        for (let i = currentDots; i < numberOfDots; i++) {
          const dot = document.createElement('span');
          dot.className = 'collapse_dot new-dot';
          dotsLine.appendChild(dot);
        }
      } else if (!isExpanding) {
        dotsLine.innerHTML = '';
        for (let i = 0; i < numberOfDots; i++) {
          const dot = document.createElement('span');
          dot.className = 'collapse_dot';
          dotsLine.appendChild(dot);
        }
      }
    };
  
    const animateNewDots = (dotsLine) => {
      if (!dotsLine) return;
      
      const newDots = dotsLine.querySelectorAll('.collapse_dot.new-dot');
      newDots.forEach((dot, index) => {
        setTimeout(() => {
          dot.classList.add('animated');
        }, index * 100);
      });
    };

    const toggleFAQItem = (item) => {
      if (!item) return;
      
      const answer = item.querySelector('.faq-answer');
      const arrow = item.querySelector('.icon-arrow');
      const dotsLine = item.querySelector('.dots-line');
      
      if (answer && arrow) {
        const isExpanding = !answer.classList.contains('visible');
        
        // Toggle visibility
        answer.classList.toggle('visible');
        arrow.classList.toggle('rotated');
        
        // Update ARIA attributes
        const currentState = item.getAttribute('aria-expanded') === 'true';
        item.setAttribute('aria-expanded', !currentState);
        
        if (dotsLine && isExpanding) {
          requestAnimationFrame(() => {
            setTimeout(() => {
              createDots(dotsLine, true);
              animateNewDots(dotsLine);
            }, 200);
          });
        } else if (dotsLine) {
          dotsLine.querySelectorAll('.collapse_dot.new-dot').forEach(dot => dot.remove());
        }
      }
    };

    // Initialize dots for each FAQ item within this section
    const dotsLines = section.querySelectorAll('[data-dots-line]');
    dotsLines.forEach(dotsLine => {
      createDots(dotsLine, false);
    });

    // Add keyboard and click event handlers for items within this section
    const faqItems = section.querySelectorAll('[data-faq-item]');
    faqItems.forEach((item, index) => {
      // Ensure each item has unique ID and content has corresponding ID
      item.id = `faq-item-${sectionIndex}-${index}`;
      const answer = item.querySelector('.faq-answer');
      if (answer) {
        answer.id = `faq-content-${sectionIndex}-${index}`;
        item.setAttribute('aria-controls', answer.id);
      }

      // Handle both click and keyboard events
      const handleActivation = (e) => {
        // Prevent default to stop any unwanted scrolling or default behavior
        e.preventDefault();
        toggleFAQItem(item);
      };

      // Click event for mouse users
      item.addEventListener('click', handleActivation);

      // Keyboard events for accessibility
      item.addEventListener('keydown', (e) => {
        // Trigger on Enter or Space key
        if (e.key === 'Enter' || e.key === ' ' || e.key === 'Space') {
          handleActivation(e);
        }
        
        // Add arrow key navigation
        if (e.key === 'ArrowDown' || e.key === 'ArrowUp') {
          e.preventDefault();
          const items = Array.from(faqItems);
          const currentIndex = items.indexOf(item);
          
          // Calculate next index with wrap-around
          let nextIndex;
          if (e.key === 'ArrowDown') {
            nextIndex = (currentIndex + 1) % items.length;
          } else {
            nextIndex = (currentIndex - 1 + items.length) % items.length;
          }
          
          // Focus on the next/previous item
          items[nextIndex].focus();
        }
      });

      // Ensure the item can receive keyboard focus
      item.setAttribute('tabindex', '0');
    });

    let resizeTimeout;
    const handleResize = () => {
      clearTimeout(resizeTimeout);
      resizeTimeout = setTimeout(() => {
        const sectionDotsLines = section.querySelectorAll('[data-dots-line]');
        sectionDotsLines.forEach(dotsLine => {
          createDots(dotsLine, false);
        });
      }, 250);
    };
    
    window.addEventListener('resize', handleResize);
  });
});
           </script>
{% schema %}
{
  "name": "t:sections.collapsible_content.name",
  "tag": "section",
  "class": "section",
  "disabled_on": {
    "groups": ["header", "footer"]
  },
  "settings": [
    {
      "type": "color_scheme",
      "id": "color_scheme",
      "label": "t:sections.all.colors.label",
      "default": "scheme-1"
    },
    {
      "type": "text",
      "id": "caption",
      "label": "FAQ Title",
      "default": "Help & Support"
    },
    {
      "type": "text",
      "id": "description",
      "label": "FAQ Description",
      "default": "Use this text to share more information about your store."
    },
    {
      "type": "select",
      "id": "layout_style",
      "label": "Choose Layout",
      "options": [
        {
          "value": "layout1",
          "label": "Layout 1"
        },
        {
          "value": "layout2",
          "label": "Layout 2"
        }
      ],
      "default": "layout1"
    },
    {
      "type": "range",
      "id": "padding_top",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "t:sections.all.padding.padding_top",
      "default": 36
    },
    {
      "type": "range",
      "id": "padding_bottom",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "t:sections.all.padding.padding_bottom",
      "default": 36
    }
  ],
  "blocks": [
    {
      "type": "collapsible_row",
      "name": "t:sections.collapsible_content.blocks.collapsible_row.name",
      "settings": [
        {
          "type": "select",
          "id": "serialno",
          "label": "Bullet Number",
          "options": [
            { "label": "1", "value": "01" },
            { "label": "2", "value": "02" },
            { "label": "3", "value": "03" },
            { "label": "4", "value": "04" },
            { "label": "5", "value": "05" },
            { "label": "6", "value": "06" },
            { "label": "7", "value": "07" },
            { "label": "8", "value": "08" },
            { "label": "9", "value": "09" },
            { "label": "10", "value": "10" }
          ],
          "default": "01"
        },
        {
          "type": "text",
          "id": "questiontext",
          "default": "Provide a question or statement",
          "label": "t:sections.collapsible_content.blocks.collapsible_row.settings.heading.label",
          "info": "t:sections.collapsible_content.blocks.collapsible_row.settings.heading.info"
        },
        {
          "type": "textarea",
          "id": "solutionans",
          "label": "Text",
          "default": "Use this section to answer a question, provide product information, or talk about your brand."
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "t:sections.collapsible_content.presets.name",
      "blocks": [
        {
          "type": "collapsible_row"
        },
        {
          "type": "collapsible_row"
        },
        {
          "type": "collapsible_row"
        },
        {
          "type": "collapsible_row"
        },
        {
          "type": "collapsible_row"
        }
      ]
    }
  ]
}
{% endschema %}
