{{ 'product-description.css' | asset_url | stylesheet_tag }}
<script src="{{ 'product-description.js' | asset_url }}" defer="defer"></script>

{%- style -%}
  :root {
    --collapse_header_background_color: {{ section.settings.collapse_header_background_color }};
    --collapse_header_secondary_background_color: {{ section.settings.collapse_header_secondary_background_color }};
    --collapse_header_text_color: {{ section.settings.collapse_header_text_color }};
    --collapse_body_background_color: {{ section.settings.collapse_body_background_color }};
    --collapse_body_text_color: {{ section.settings.collapse_body_text_color }};
    --active_tab_background_color: {{ section.settings.active_tab_background_color | default: '#000000' }};
  }
    .tablinks:focus {
    outline: 2px solid var(--active_tab_background_color, #000000);
    outline-offset: 2px;
  }

  .accordion-button:focus {
    box-shadow: 0 0 0 0.25rem rgba(0, 0, 0, 0.25);
    outline: none;
  }
{%- endstyle -%}

{% if section.blocks.first.settings.heading != blank %}
  <div class="color-{{ section.settings.color_scheme }}">
    <div class="collapse-width">
      <div class="collapse-tab">
        <!-- The animated background element -->
        <div class="active-tab-background">&nbsp;</div>
        {%- for block in section.blocks -%}
          <button
            class="tablinks {% if forloop.first %}active{% endif %}"
            onclick="openTab(event, 'Tab{{ forloop.index }}')"
          >
            {{ block.settings.heading }}
          </button>
        {% endfor %}
      </div>
      <div class="product-description-drawer">
        <div class="product-description-bottom_container">
          {% for i in (0..14) %}
            <div class="product-description-semicircles"></div>
          {% endfor %}
        </div>
      </div>
      <!-- Tab Content -->
      <div class="product-description-wrapper">
        {%- for block in section.blocks -%}
          <div
            id="Tab{{ forloop.index }}"
            class="product-description-grid-container"
            {% if forloop.first %}
              style="display: grid;"
            {% endif %}
          >
            {% if block.settings.Point_1 != '' %}
              <div class="product-description-paragraph">
                <div class="product-description-in-semicircles"></div>
                <p class="product-description-subclass">{{ block.settings.Point_1 }}</p>
              </div>
            {% endif %}
            {% if block.settings.Point_2 != '' %}
              <div class="product-description-paragraph">
                <div class="product-description-in-semicircles"></div>
                <p class="product-description-subclass">{{ block.settings.Point_2 }}</p>
              </div>
            {% endif %}
            {% if block.settings.Point_3 != '' %}
              <div class="product-description-paragraph">
                <div class="product-description-in-semicircles"></div>
                <p class="product-description-subclass">{{ block.settings.Point_3 }}</p>
              </div>
            {% endif %}
            {% if block.settings.Point_4 != '' %}
              <div class="product-description-paragraph">
                <div class="product-description-in-semicircles"></div>
                <p class="product-description-subclass">{{ block.settings.Point_4 }}</p>
              </div>
            {% endif %}
          </div>
        {% endfor %}
      </div>
    </div>
  </div>
  <div class="color-{{ section.settings.color_scheme }} mobile-collapsible-tabs" style="padding-bottom: 10px;">
    <div class="accordion" id="accordionExample">
      {%- for block in section.blocks -%}
        <div class="accordion-item">
          <h2 class="accordion-header" id="heading{{ forloop.index }}">
            <button
              class="accordion-button {% unless forloop.first %}collapsed{% endunless %}"
              type="button"
              data-bs-toggle="collapse"
              data-bs-target="#collapse{{ forloop.index }}"
              aria-expanded="{% if forloop.first %}true{% else %}false{% endif %}"
              aria-controls="collapse{{ forloop.index }}"
            >
              {{ block.settings.heading }}
            </button>
          </h2>
          <div
            id="collapse{{ forloop.index }}"
            class="accordion-collapse collapse {% if forloop.first %}show{% endif %}"
            aria-labelledby="heading{{ forloop.index }}"
            data-bs-parent="#accordionExample"
          >
            <div class="accordion-body">
              <div class="product-description-grid-container" style="display: grid">
                {% if block.settings.Point_1 != '' %}
                  <div class="product-description-paragraph">
                    <div class="product-description-in-semicircles"></div>
                    <p class="product-description-subclass">{{ block.settings.Point_1 }}</p>
                  </div>
                {% endif %}
                {% if block.settings.Point_2 != '' %}
                  <div class="product-description-paragraph">
                    <div class="product-description-in-semicircles"></div>
                    <p class="product-description-subclass">{{ block.settings.Point_2 }}</p>
                  </div>
                {% endif %}
                {% if block.settings.Point_3 != '' %}
                  <div class="product-description-paragraph">
                    <div class="product-description-in-semicircles"></div>
                    <p class="product-description-subclass">{{ block.settings.Point_3 }}</p>
                  </div>
                {% endif %}
                {% if block.settings.Point_4 != '' %}
                  <div class="product-description-paragraph">
                    <div class="product-description-in-semicircles"></div>
                    <p class="product-description-subclass">{{ block.settings.Point_4 }}</p>
                  </div>
                {% endif %}
              </div>
            </div>
          </div>
        </div>
      {% endfor %}
      <div class="accordion-below">
        <div class="product-description-drawer">
          <div class="product-description-bottom_container">
            {% for i in (0..10) %}
              <div class="product-description-semicircles"></div>
            {% endfor %}
          </div>
        </div>
      </div>
    </div>
  </div>
{% endif %}

<script>
document.addEventListener('DOMContentLoaded', function() {
  // Create the sliding background element if it doesn't exist
  let backgroundElement = document.querySelector('.active-tab-background');
  if (!backgroundElement && document.querySelector('.collapse-tab')) {
    backgroundElement = document.createElement('div');
    backgroundElement.className = 'active-tab-background';
    document.querySelector('.collapse-tab').appendChild(backgroundElement);
  }

  // Set first tab as active by default and position the sliding background
  if (document.querySelector('.tablinks')) {
    const firstTab = document.querySelector('.tablinks');
    firstTab.classList.add('active');
    document.getElementById('Tab1').style.display = 'grid';

    // Initialize the background position with a delay to ensure DOM is fully rendered
    setTimeout(initializeBackground, 100);
  }

  // Function to initialize the background position without animation
  function initializeBackground() {
    const activeTab = document.querySelector('.tablinks.active');
    const backgroundBox = document.querySelector('.active-tab-background');
    const tabContainer = document.querySelector('.collapse-tab');

    if (activeTab && backgroundBox && tabContainer) {
      // Get the active tab's position relative to its container
      const tabRect = activeTab.getBoundingClientRect();
      const containerRect = tabContainer.getBoundingClientRect();

      // Position the background without transition
      backgroundBox.style.transition = 'none';
      backgroundBox.style.width = `${tabRect.width}px`;
      backgroundBox.style.left = `${tabRect.left - containerRect.left}px`;

      // Force a reflow to apply the changes immediately
      backgroundBox.offsetWidth;

      // Restore the transition
      setTimeout(() => {
        backgroundBox.style.transition = 'left 0.4s cubic-bezier(0.25, 0.1, 0.25, 1), width 0.4s cubic-bezier(0.25, 0.1, 0.25, 1)';
      }, 50);
    }
  }

  // Improved openTab function for fluid animation
  window.openTab = function(evt, tabName) {
    // Prevent default behavior
    evt.preventDefault();

    var i, tabcontent, tablinks;
    const targetTab = evt.currentTarget;

    // Skip if already on this tab
    if (targetTab.classList.contains('active')) {
      return;
    }

    // First, animate the background
    const backgroundBox = document.querySelector('.active-tab-background');
    const tabContainer = document.querySelector('.collapse-tab');

    if (backgroundBox && tabContainer) {
      // Calculate the new position
      const tabRect = targetTab.getBoundingClientRect();
      const containerRect = tabContainer.getBoundingClientRect();
      const newLeft = tabRect.left - containerRect.left;

      // Apply the new position and width with animation
      backgroundBox.style.width = `${tabRect.width}px`;
      backgroundBox.style.left = `${newLeft}px`;
    }

    // Hide all tab content
    tabcontent = document.getElementsByClassName("product-description-grid-container");
    for (i = 0; i < tabcontent.length; i++) {
      tabcontent[i].style.display = "none";
    }

    // Remove active class from all tabs
    tablinks = document.getElementsByClassName("tablinks");
    for (i = 0; i < tablinks.length; i++) {
      tablinks[i].classList.remove("active");
    }

    // Show the current tab content and add active class to the button
    document.getElementById(tabName).style.display = "grid";
    targetTab.classList.add("active");
  };

  // Update background position on window resize
  window.addEventListener('resize', function() {
    // Debounce the resize event
    clearTimeout(window.resizeTimer);
    window.resizeTimer = setTimeout(function() {
      const activeTab = document.querySelector('.tablinks.active');
      const backgroundBox = document.querySelector('.active-tab-background');
      const tabContainer = document.querySelector('.collapse-tab');

      if (activeTab && backgroundBox && tabContainer) {
        const tabRect = activeTab.getBoundingClientRect();
        const containerRect = tabContainer.getBoundingClientRect();

        // Update position without animation during resize
        backgroundBox.style.transition = 'none';
        backgroundBox.style.width = `${tabRect.width}px`;
        backgroundBox.style.left = `${tabRect.left - containerRect.left}px`;

        // Restore animation after position update
        setTimeout(() => {
          backgroundBox.style.transition = 'left 0.4s cubic-bezier(0.25, 0.1, 0.25, 1), width 0.4s cubic-bezier(0.25, 0.1, 0.25, 1)';
        }, 50);
      }
    }, 100);
  });
});

</script>

{% schema %}
{
  "name": "t:sections.collapsible_tabs.name",
  "tag": "section",
  "class": "section",
  "disabled_on": {
    "groups": ["header", "footer"]
  },
  "settings": [
    {
      "type": "inline_richtext",
      "id": "heading",
      "label": "t:sections.collapsible_tabs.settings.heading.label",
      "default": "t:sections.collapsible_tabs.settings.heading.default"
    },
    {
      "type": "color_scheme",
      "id": "color_scheme",
      "label": "Collapsible Tabs Color Scheme",
      "default": "scheme-1"
    }
  ],
  "blocks": [
    {
      "type": "collapsible_row",
      "name": "t:sections.collapsible_tabs.blocks.collapsible_row.name",
      "limit": 6,
      "settings": [
        {
          "type": "text",
          "id": "heading",
          "default": "t:sections.collapsible_tabs.blocks.collapsible_row.settings.heading.default",
          "label": "t:sections.collapsible_tabs.blocks.collapsible_row.settings.heading.label",
          "info": "t:sections.collapsible_tabs.blocks.collapsible_row.settings.heading.info"
        },
        {
          "type": "text",
          "id": "Point_1",
          "label": "t:sections.collapsible_tabs.blocks.collapsible_row.settings.Point_1.label",
          "info": "t:sections.collapsible_tabs.blocks.collapsible_row.settings.Point_1.info"
        },
        {
          "type": "text",
          "id": "Point_2",
          "label": "t:sections.collapsible_tabs.blocks.collapsible_row.settings.Point_2.label",
          "info": "t:sections.collapsible_tabs.blocks.collapsible_row.settings.Point_2.info"
        },
        {
          "type": "text",
          "id": "Point_3",
          "label": "t:sections.collapsible_tabs.blocks.collapsible_row.settings.Point_3.label",
          "info": "t:sections.collapsible_tabs.blocks.collapsible_row.settings.Point_3.info"
        },
        {
          "type": "text",
          "id": "Point_4",
          "label": "t:sections.collapsible_tabs.blocks.collapsible_row.settings.Point_4.label",
          "info": "t:sections.collapsible_tabs.blocks.collapsible_row.settings.Point_4.info"
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "Product Details",
      "blocks": [
        {
          "type": "collapsible_row"
        },
        {
          "type": "collapsible_row"
        },
        {
          "type": "collapsible_row"
        },
        {
          "type": "collapsible_row"
        },
        {
          "type": "collapsible_row"
        }
      ]
    }
  ]
}
{% endschema %}
